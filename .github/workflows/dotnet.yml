name: .NET Backend CI/CD

# Gatilho: Roda quando houver push ou pull request na branch 'main'
# e somente se houverem altera��es na pasta 'backend/' (ajuste o nome da pasta)
on:
  push:
    branches: [ "master" ]
    paths:
      - 'GeoLoc/**'  # <-- CORRETO! Aciona para qualquer mudança dentro da pasta GeoLoc.
      - '.github/workflows/dotnet.yml' # Opcional, mas bom: aciona se o próprio workflow for alterado.
  pull_request:
    branches: [ "master" ]
    paths:
      - 'GeoLoc/**'  # <-- CORRETO! Aciona para qualquer mudança dentro da pasta GeoLoc.
      - '.github/workflows/dotnet.yml' # Opcional, mas bom: aciona se o próprio workflow for alterado.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 1. Faz o checkout do c�digo do reposit�rio
    - name: Checkout code
      uses: actions/checkout@v4

    # 2. Configura o ambiente .NET
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x' # Use a vers�o do seu projeto

    # --- CI: Continuous Integration ---
    # 3. Restaura as depend�ncias do projeto
    - name: Restore dependencies
      run: dotnet restore ./GeoLoc.sln # Ajuste o caminho

    # 4. Compila o projeto
    - name: Build
      run: dotnet build ./GeoLoc.sln --no-restore # Ajuste o caminho

    # 5. Roda os testes (se voc� tiver)
    - name: Test
      run: dotnet test ./GeoLoc.sln --no-build --verbosity normal # Ajuste o caminho
      env:
        SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
        SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}

    # --- CD: Continuous Deployment (s� roda na branch 'main') ---
    - name: Publish application
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: dotnet publish ./GeoLoc.sln -c Release -o ./publish # Ajuste o caminho

    - name: Deploy to AWS EC2
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_KEY }}
        script: |
          # Copia os arquivos publicados para a inst�ncia EC2
          # Este comando usa scp internamente, ent�o a sintaxe � um pouco diferente
          scp -r -i ${{ secrets.EC2_KEY }} ./publish/* ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }}:/var/www/geoloc-api

          # Conecta via SSH para parar o servi�o, mover os arquivos e reiniciar
          # O ideal � ter seu app configurado como um servi�o (systemd)
          echo "Stopping service..."
          sudo systemctl stop geoloc-api.service

          echo "Moving files..."
          sudo rm -rf /var/www/geoloc-api/*
          sudo mv /home/${{ secrets.EC2_USERNAME }}/publish/* /var/www/geoloc-api/

          echo "Starting service..."
          sudo systemctl start geoloc-api.service

          echo "Deployment finished!"